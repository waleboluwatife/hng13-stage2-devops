##
# Nginx configuration for the blue/green deployment when the blue pool is
# active.  The primary upstream server is app_blue and app_green is
# configured as a backup.  If app_blue returns an error, timeout or
# 5xx response, Nginx will retry the request against app_green within
# the same client request.  Connection and read timeouts are kept
# short to allow quick failover.

upstream backend {
    # Primary server – blue pool.  max_fails and fail_timeout control
    # how quickly Nginx marks this server as failed.  If one request
    # fails within 5 seconds it will be marked unavailable and Nginx
    # will start sending requests to the backup.
    server app_blue:__PORT__ max_fails=1 fail_timeout=5s;

    # Backup server – green pool.  This server is only used when the
    # primary is considered failed.  Nginx will automatically switch
    # traffic here when necessary and return to the primary once it
    # becomes healthy again.
    server app_green:__PORT__ backup;
}

log_format hng_stage3
  '$remote_addr '
  '$time_local '
  'pool=$upstream_http_x_app_pool '
  'release=$upstream_http_x_release_id '
  'status=$status '
  'upstream_status=$upstream_status '
  'upstream_addr=$upstream_addr '
  'req_time=$request_time '
  'upstream_time=$upstream_response_time '
  '"$request"';

access_log /var/log/nginx/access_stage3.log hng_stage3;

server {
    listen 80;
    server_name _;

    # Forward all requests to the backend upstream.  Proxy settings
    # ensure that headers are preserved and failures are retried on the
    # backup server.  The timeouts are intentionally low (1 second) to
    # detect failures quickly; adjust if your application requires
    # longer response times.
    location / {
        proxy_pass http://backend;

        # Preserve important client information and ensure the
        # application sees the original Host header.  These proxy
        # headers also forward the remote IP and protocol to the
        # backend service.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts for quick detection of unresponsive upstreams
        proxy_connect_timeout 1s;
        proxy_send_timeout 1s;
        proxy_read_timeout 1s;

        # Retry conditions – if the primary upstream returns an error,
        # timeout, invalid header or HTTP 5xx, Nginx will retry the
        # request against the backup server.  Limit the number of
        # retries to 2 to avoid infinite loops.
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
    }
}